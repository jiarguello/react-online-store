{"ast":null,"code":"var _jsxFileName = \"/home/marcelo/projects/MyRepos/react-online-store/src/Pages/Home.jsx\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport ListOfCategories from '../Components/ListOfCategories';\nimport SearchBar from '../Components/SearchBar';\nimport ProductCard from '../Components/ProductCard';\nimport * as api from '../services/api';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchText: '',\n      productsList: [],\n      categories: [],\n      addItem: []\n    };\n    this.addItemCart = this.addItemCart.bind(this);\n    this.fetchApiSearch = this.fetchApiSearch.bind(this);\n    this.fetchByCategoryId = this.fetchByCategoryId.bind(this);\n    this.addItemCart = this.addItemCart.bind(this);\n    this.handleSearchTextChange = this.handleSearchTextChange.bind(this);\n    this.setCart = this.setCart.bind(this);\n  }\n\n  componentDidMount() {\n    api.getCategories().then(response => this.setState({\n      categories: response\n    }));\n    this.setCart();\n  }\n\n  addItemCart(id) {\n    console.log(id); // const { productsList } = this.state;\n    // const itemProduct = productsList.find((item) => id === item.id);\n    // itemProduct.quantity = 1;\n    // this.setState((prevState) => {\n    //   localStorage\n    //     .setItem('shoppingCart', JSON.stringify([...prevState.addItem, itemProduct]));\n    //   return ({\n    //     addItem: [...prevState.addItem, itemProduct],\n    //   });\n    // });\n  }\n\n  async fetchApiSearch() {\n    const {\n      searchText\n    } = this.state;\n    const fetchList = await api.getProductsFromCategoryAndQuery('', searchText);\n\n    if (!fetchList.results.length) {\n      this.setState({\n        showMessage: true\n      });\n    } else {\n      this.setState({\n        productsList: fetchList.results,\n        showMessage: false\n      });\n    }\n  }\n\n  async fetchByCategoryId(categoryId) {\n    const fetchList = await api.getProductsFromCategoryAndQuery(categoryId, '');\n    this.setState({\n      productsList: fetchList.results\n    });\n  }\n\n  handleSearchTextChange({\n    target\n  }) {\n    const {\n      value\n    } = target;\n    this.setState({\n      searchText: value\n    });\n  }\n\n  setCart() {\n    if (localStorage.getItem('shoppingCart')) {\n      const shoppingCart = JSON.parse(localStorage.getItem('shoppingCart'));\n      this.setState({\n        addItem: shoppingCart\n      });\n    }\n  }\n\n  render() {\n    const {\n      productsList,\n      showMessage,\n      categories,\n      addItem\n    } = this.state;\n    const emptySearchMessage = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 32\n      }\n    }, \"Nenhum produto foi encontrado\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(SearchBar, {\n      onSearchTextChange: this.handleSearchTextChange,\n      onClickSearch: this.fetchApiSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ListOfCategories, {\n      categories: categories,\n      onClickSelectedCategory: this.fetchByCategoryId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }), showMessage ? emptySearchMessage : /*#__PURE__*/React.createElement(ProductCard, {\n      products: productsList,\n      onClick: this.addItemCart,\n      cartItens: addItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 46\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: {\n        pathname: '/shopping-cart',\n        state: addItem\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, \"Carrinho \", addItem.length)));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/marcelo/projects/MyRepos/react-online-store/src/Pages/Home.jsx"],"names":["React","Link","ListOfCategories","SearchBar","ProductCard","api","Home","Component","constructor","props","state","searchText","productsList","categories","addItem","addItemCart","bind","fetchApiSearch","fetchByCategoryId","handleSearchTextChange","setCart","componentDidMount","getCategories","then","response","setState","id","console","log","fetchList","getProductsFromCategoryAndQuery","results","length","showMessage","categoryId","target","value","localStorage","getItem","shoppingCart","JSON","parse","render","emptySearchMessage","pathname"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB;;AAEA,MAAMC,IAAN,SAAmBN,KAAK,CAACO,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,EADD;AAEXC,MAAAA,YAAY,EAAE,EAFH;AAGXC,MAAAA,UAAU,EAAE,EAHD;AAIXC,MAAAA,OAAO,EAAE;AAJE,KAAb;AAMA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBF,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKD,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKG,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BH,IAA5B,CAAiC,IAAjC,CAA9B;AACA,SAAKI,OAAL,GAAe,KAAKA,OAAL,CAAaJ,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEDK,EAAAA,iBAAiB,GAAG;AAClBhB,IAAAA,GAAG,CAACiB,aAAJ,GACGC,IADH,CACSC,QAAD,IAAc,KAAKC,QAAL,CAAc;AAAEZ,MAAAA,UAAU,EAAEW;AAAd,KAAd,CADtB;AAEA,SAAKJ,OAAL;AACD;;AAEDL,EAAAA,WAAW,CAACW,EAAD,EAAK;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ,EADc,CAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,QAAMT,cAAN,GAAuB;AACrB,UAAM;AAAEN,MAAAA;AAAF,QAAiB,KAAKD,KAA5B;AACA,UAAMmB,SAAS,GAAG,MAAMxB,GAAG,CAACyB,+BAAJ,CAAoC,EAApC,EAAwCnB,UAAxC,CAAxB;;AAEA,QAAI,CAACkB,SAAS,CAACE,OAAV,CAAkBC,MAAvB,EAA+B;AAC7B,WAAKP,QAAL,CAAc;AACZQ,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KAJD,MAIO;AACL,WAAKR,QAAL,CAAc;AACZb,QAAAA,YAAY,EAAEiB,SAAS,CAACE,OADZ;AAEZE,QAAAA,WAAW,EAAE;AAFD,OAAd;AAID;AACF;;AAED,QAAMf,iBAAN,CAAwBgB,UAAxB,EAAoC;AAClC,UAAML,SAAS,GAAG,MAAMxB,GAAG,CAACyB,+BAAJ,CAAoCI,UAApC,EAAgD,EAAhD,CAAxB;AACA,SAAKT,QAAL,CAAc;AACZb,MAAAA,YAAY,EAAEiB,SAAS,CAACE;AADZ,KAAd;AAGD;;AAEDZ,EAAAA,sBAAsB,CAAC;AAAEgB,IAAAA;AAAF,GAAD,EAAa;AACjC,UAAM;AAAEC,MAAAA;AAAF,QAAYD,MAAlB;AACA,SAAKV,QAAL,CAAc;AACZd,MAAAA,UAAU,EAAEyB;AADA,KAAd;AAGD;;AAEDhB,EAAAA,OAAO,GAAG;AACR,QAAIiB,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAJ,EAA0C;AACxC,YAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CAArB;AACA,WAAKb,QAAL,CAAc;AACZX,QAAAA,OAAO,EAAEyB;AADG,OAAd;AAGD;AACF;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE9B,MAAAA,YAAF;AAAgBqB,MAAAA,WAAhB;AAA6BpB,MAAAA,UAA7B;AAAyCC,MAAAA;AAAzC,QAAqD,KAAKJ,KAAhE;AACA,UAAMiC,kBAAkB,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAA3B;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,kBAAkB,EAAG,KAAKxB,sBAD5B;AAEE,MAAA,aAAa,EAAG,KAAKF,cAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAKE,oBAAC,gBAAD;AACE,MAAA,UAAU,EAAGJ,UADf;AAEE,MAAA,uBAAuB,EAAG,KAAKK,iBAFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAUIe,WAAW,GAAGU,kBAAH,gBAAwB,oBAAC,WAAD;AACjC,MAAA,QAAQ,EAAG/B,YADsB;AAEjC,MAAA,OAAO,EAAG,KAAKG,WAFkB;AAGjC,MAAA,SAAS,EAAGD,OAHqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVvC,eAgBE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AACE,MAAA,EAAE,EAAG;AACH8B,QAAAA,QAAQ,EAAE,gBADP;AAEHlC,QAAAA,KAAK,EAAEI;AAFJ,OADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAMaA,OAAO,CAACkB,MANrB,CADF,CAhBF,CADF;AA6BD;;AA5GgC;;AA+GnC,eAAe1B,IAAf","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport ListOfCategories from '../Components/ListOfCategories';\nimport SearchBar from '../Components/SearchBar';\nimport ProductCard from '../Components/ProductCard';\nimport * as api from '../services/api';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchText: '',\n      productsList: [],\n      categories: [],\n      addItem: [],\n    };\n    this.addItemCart = this.addItemCart.bind(this);\n    this.fetchApiSearch = this.fetchApiSearch.bind(this);\n    this.fetchByCategoryId = this.fetchByCategoryId.bind(this);\n    this.addItemCart = this.addItemCart.bind(this);\n    this.handleSearchTextChange = this.handleSearchTextChange.bind(this);\n    this.setCart = this.setCart.bind(this);\n  }\n\n  componentDidMount() {\n    api.getCategories()\n      .then((response) => this.setState({ categories: response }));\n    this.setCart();\n  }\n\n  addItemCart(id) {\n    console.log(id);\n    // const { productsList } = this.state;\n    // const itemProduct = productsList.find((item) => id === item.id);\n    // itemProduct.quantity = 1;\n    // this.setState((prevState) => {\n    //   localStorage\n    //     .setItem('shoppingCart', JSON.stringify([...prevState.addItem, itemProduct]));\n    //   return ({\n    //     addItem: [...prevState.addItem, itemProduct],\n    //   });\n    // });\n  }\n\n  async fetchApiSearch() {\n    const { searchText } = this.state;\n    const fetchList = await api.getProductsFromCategoryAndQuery('', searchText);\n\n    if (!fetchList.results.length) {\n      this.setState({\n        showMessage: true,\n      });\n    } else {\n      this.setState({\n        productsList: fetchList.results,\n        showMessage: false,\n      });\n    }\n  }\n\n  async fetchByCategoryId(categoryId) {\n    const fetchList = await api.getProductsFromCategoryAndQuery(categoryId, '');\n    this.setState({\n      productsList: fetchList.results,\n    });\n  }\n\n  handleSearchTextChange({ target }) {\n    const { value } = target;\n    this.setState({\n      searchText: value,\n    });\n  }\n\n  setCart() {\n    if (localStorage.getItem('shoppingCart')) {\n      const shoppingCart = JSON.parse(localStorage.getItem('shoppingCart'));\n      this.setState({\n        addItem: shoppingCart,\n      });\n    }\n  }\n\n  render() {\n    const { productsList, showMessage, categories, addItem } = this.state;\n    const emptySearchMessage = <p>Nenhum produto foi encontrado</p>;\n    return (\n      <div>\n        <SearchBar\n          onSearchTextChange={ this.handleSearchTextChange }\n          onClickSearch={ this.fetchApiSearch }\n        />\n        <ListOfCategories\n          categories={ categories }\n          onClickSelectedCategory={ this.fetchByCategoryId }\n        />\n        {\n          showMessage ? emptySearchMessage : <ProductCard\n            products={ productsList }\n            onClick={ this.addItemCart }\n            cartItens={ addItem }\n          />\n        }\n        <button type=\"button\">\n          <Link\n            to={ {\n              pathname: '/shopping-cart',\n              state: addItem,\n            } }\n          >\n            Carrinho { addItem.length }\n          </Link>\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}